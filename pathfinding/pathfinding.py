# This file was automatically generated by SWIG (http://www.swig.org).
# Version 4.0.1
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
if _swig_python_version_info < (2, 7, 0):
    raise RuntimeError("Python 2.7 or later required")

# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _pathfinding
else:
    import _pathfinding

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "thisown":
            self.this.own(value)
        elif name == "this":
            set(self, name, value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


class SwigPyIterator(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _pathfinding.delete_SwigPyIterator

    def value(self):
        return _pathfinding.SwigPyIterator_value(self)

    def incr(self, n=1):
        return _pathfinding.SwigPyIterator_incr(self, n)

    def decr(self, n=1):
        return _pathfinding.SwigPyIterator_decr(self, n)

    def distance(self, x):
        return _pathfinding.SwigPyIterator_distance(self, x)

    def equal(self, x):
        return _pathfinding.SwigPyIterator_equal(self, x)

    def copy(self):
        return _pathfinding.SwigPyIterator_copy(self)

    def next(self):
        return _pathfinding.SwigPyIterator_next(self)

    def __next__(self):
        return _pathfinding.SwigPyIterator___next__(self)

    def previous(self):
        return _pathfinding.SwigPyIterator_previous(self)

    def advance(self, n):
        return _pathfinding.SwigPyIterator_advance(self, n)

    def __eq__(self, x):
        return _pathfinding.SwigPyIterator___eq__(self, x)

    def __ne__(self, x):
        return _pathfinding.SwigPyIterator___ne__(self, x)

    def __iadd__(self, n):
        return _pathfinding.SwigPyIterator___iadd__(self, n)

    def __isub__(self, n):
        return _pathfinding.SwigPyIterator___isub__(self, n)

    def __add__(self, n):
        return _pathfinding.SwigPyIterator___add__(self, n)

    def __sub__(self, *args):
        return _pathfinding.SwigPyIterator___sub__(self, *args)
    def __iter__(self):
        return self

# Register SwigPyIterator in _pathfinding:
_pathfinding.SwigPyIterator_swigregister(SwigPyIterator)

class VectorInt(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _pathfinding.VectorInt_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _pathfinding.VectorInt___nonzero__(self)

    def __bool__(self):
        return _pathfinding.VectorInt___bool__(self)

    def __len__(self):
        return _pathfinding.VectorInt___len__(self)

    def __getslice__(self, i, j):
        return _pathfinding.VectorInt___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _pathfinding.VectorInt___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _pathfinding.VectorInt___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _pathfinding.VectorInt___delitem__(self, *args)

    def __getitem__(self, *args):
        return _pathfinding.VectorInt___getitem__(self, *args)

    def __setitem__(self, *args):
        return _pathfinding.VectorInt___setitem__(self, *args)

    def pop(self):
        return _pathfinding.VectorInt_pop(self)

    def append(self, x):
        return _pathfinding.VectorInt_append(self, x)

    def empty(self):
        return _pathfinding.VectorInt_empty(self)

    def size(self):
        return _pathfinding.VectorInt_size(self)

    def swap(self, v):
        return _pathfinding.VectorInt_swap(self, v)

    def begin(self):
        return _pathfinding.VectorInt_begin(self)

    def end(self):
        return _pathfinding.VectorInt_end(self)

    def rbegin(self):
        return _pathfinding.VectorInt_rbegin(self)

    def rend(self):
        return _pathfinding.VectorInt_rend(self)

    def clear(self):
        return _pathfinding.VectorInt_clear(self)

    def get_allocator(self):
        return _pathfinding.VectorInt_get_allocator(self)

    def pop_back(self):
        return _pathfinding.VectorInt_pop_back(self)

    def erase(self, *args):
        return _pathfinding.VectorInt_erase(self, *args)

    def __init__(self, *args):
        _pathfinding.VectorInt_swiginit(self, _pathfinding.new_VectorInt(*args))

    def push_back(self, x):
        return _pathfinding.VectorInt_push_back(self, x)

    def front(self):
        return _pathfinding.VectorInt_front(self)

    def back(self):
        return _pathfinding.VectorInt_back(self)

    def assign(self, n, x):
        return _pathfinding.VectorInt_assign(self, n, x)

    def resize(self, *args):
        return _pathfinding.VectorInt_resize(self, *args)

    def insert(self, *args):
        return _pathfinding.VectorInt_insert(self, *args)

    def reserve(self, n):
        return _pathfinding.VectorInt_reserve(self, n)

    def capacity(self):
        return _pathfinding.VectorInt_capacity(self)
    __swig_destroy__ = _pathfinding.delete_VectorInt

# Register VectorInt in _pathfinding:
_pathfinding.VectorInt_swigregister(VectorInt)

class VectorVectorInt(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _pathfinding.VectorVectorInt_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _pathfinding.VectorVectorInt___nonzero__(self)

    def __bool__(self):
        return _pathfinding.VectorVectorInt___bool__(self)

    def __len__(self):
        return _pathfinding.VectorVectorInt___len__(self)

    def __getslice__(self, i, j):
        return _pathfinding.VectorVectorInt___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _pathfinding.VectorVectorInt___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _pathfinding.VectorVectorInt___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _pathfinding.VectorVectorInt___delitem__(self, *args)

    def __getitem__(self, *args):
        return _pathfinding.VectorVectorInt___getitem__(self, *args)

    def __setitem__(self, *args):
        return _pathfinding.VectorVectorInt___setitem__(self, *args)

    def pop(self):
        return _pathfinding.VectorVectorInt_pop(self)

    def append(self, x):
        return _pathfinding.VectorVectorInt_append(self, x)

    def empty(self):
        return _pathfinding.VectorVectorInt_empty(self)

    def size(self):
        return _pathfinding.VectorVectorInt_size(self)

    def swap(self, v):
        return _pathfinding.VectorVectorInt_swap(self, v)

    def begin(self):
        return _pathfinding.VectorVectorInt_begin(self)

    def end(self):
        return _pathfinding.VectorVectorInt_end(self)

    def rbegin(self):
        return _pathfinding.VectorVectorInt_rbegin(self)

    def rend(self):
        return _pathfinding.VectorVectorInt_rend(self)

    def clear(self):
        return _pathfinding.VectorVectorInt_clear(self)

    def get_allocator(self):
        return _pathfinding.VectorVectorInt_get_allocator(self)

    def pop_back(self):
        return _pathfinding.VectorVectorInt_pop_back(self)

    def erase(self, *args):
        return _pathfinding.VectorVectorInt_erase(self, *args)

    def __init__(self, *args):
        _pathfinding.VectorVectorInt_swiginit(self, _pathfinding.new_VectorVectorInt(*args))

    def push_back(self, x):
        return _pathfinding.VectorVectorInt_push_back(self, x)

    def front(self):
        return _pathfinding.VectorVectorInt_front(self)

    def back(self):
        return _pathfinding.VectorVectorInt_back(self)

    def assign(self, n, x):
        return _pathfinding.VectorVectorInt_assign(self, n, x)

    def resize(self, *args):
        return _pathfinding.VectorVectorInt_resize(self, *args)

    def insert(self, *args):
        return _pathfinding.VectorVectorInt_insert(self, *args)

    def reserve(self, n):
        return _pathfinding.VectorVectorInt_reserve(self, n)

    def capacity(self):
        return _pathfinding.VectorVectorInt_capacity(self)
    __swig_destroy__ = _pathfinding.delete_VectorVectorInt

# Register VectorVectorInt in _pathfinding:
_pathfinding.VectorVectorInt_swigregister(VectorVectorInt)

class Position(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    x = property(_pathfinding.Position_x_get, _pathfinding.Position_x_set)
    y = property(_pathfinding.Position_y_get, _pathfinding.Position_y_set)

    def __init__(self):
        _pathfinding.Position_swiginit(self, _pathfinding.new_Position())
    __swig_destroy__ = _pathfinding.delete_Position

# Register Position in _pathfinding:
_pathfinding.Position_swigregister(Position)

class PathFindStruct(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    pos = property(_pathfinding.PathFindStruct_pos_get, _pathfinding.PathFindStruct_pos_set)
    camefrom = property(_pathfinding.PathFindStruct_camefrom_get, _pathfinding.PathFindStruct_camefrom_set)
    cost = property(_pathfinding.PathFindStruct_cost_get, _pathfinding.PathFindStruct_cost_set)
    gscore = property(_pathfinding.PathFindStruct_gscore_get, _pathfinding.PathFindStruct_gscore_set)
    fscore = property(_pathfinding.PathFindStruct_fscore_get, _pathfinding.PathFindStruct_fscore_set)
    in_open_set = property(_pathfinding.PathFindStruct_in_open_set_get, _pathfinding.PathFindStruct_in_open_set_set)

    def __init__(self):
        _pathfinding.PathFindStruct_swiginit(self, _pathfinding.new_PathFindStruct())
    __swig_destroy__ = _pathfinding.delete_PathFindStruct

# Register PathFindStruct in _pathfinding:
_pathfinding.PathFindStruct_swigregister(PathFindStruct)

class Finder(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _pathfinding.Finder_swiginit(self, _pathfinding.new_Finder(*args))

    def find_path(self, start, target):
        return _pathfinding.Finder_find_path(self, start, target)
    __swig_destroy__ = _pathfinding.delete_Finder

# Register Finder in _pathfinding:
_pathfinding.Finder_swigregister(Finder)



